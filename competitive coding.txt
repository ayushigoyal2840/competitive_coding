Q1)count number of set bits between given range of numbers
sol)
#include<bits/stdc++.h>
#define ll long long int
using namespace std;
int countset(int n)
{
	int count =0;
	while(n>0)
	{
		count+=(n&1);
		n=n>>1;
	}
	return count;
}
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	ll t;
	cin>>t;
	while(t--)
	{
		int a,b;
		cin>>a>>b;
		int count=0;
		for(int i=a;i<=b;i++)
		{
			if((i&1)==0 && i<b)
			{
				count+=2*countset(i)+1;
				i++;
				continue;
			}
			count+=countset(i);
		}
		cout<<count;
		}	
}
Q2)Input Format

A single integer, .

Constraints

Subtasks

 for  of the maximum score.
Output Format

Print the total number of integers  satisfying the criteria.

Sample Input 0

5
Sample Output 0

2
(5+2=5xor2)

sol)
#include<bits/stdc++.h>
using namespace std;
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    long long n;
    cin>>n;
    long long count =0;
    long long i=0;
    while(i<=n)
    {
        long long m=(n ^ i);
        if(m==(n+i))
        {
            count+=1;
            
        }
        i++;
    }
    cout<<count<<endl;
    return 0;
}
Q3)nput Format

The first line contains a single integer, , denoting the number of integers in the array.
The second line contains  space-separated integers describing the values in .

Constraints

It is guaranteed that  is an odd number and that there is one unique element.
, where .
Output Format

Print the unique integer in the array.


sol)
#include<bits/stdc++.h>
using namespace std;
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int n;
    cin>>n;
    int arr[100];
    int m;
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
        m=arr[0];
    }
    for(int i=1;i<n;i++)
    {
        m=(m ^ arr[i]);
    }
    cout<<m<<endl;
    return 0;
    
}

Q4)
Input Format

The first line contains the integer .
The second line contains the integer .

Constraints

3

Output Format

Return the maximal value of the xor operations for all permutations of the integers from l to r, inclusive.

sol)
#include<bits/stdc++.h>
using namespace std;
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int l,r;
    cin>>l>>r;
    int max=0;
    for(int i=l;i<=r;i++)
    {
        for(int j=i;j<=r;j++)
        {
            int a = (i ^ j);
            if(a>max)
            max=a;
        }
    }
    cout<<max<<"\n";
    return 0;
}


Q5)lucky number 
we have to find he index of lucky number using bit manipulation

in this program we have we have used the algorithm of formula
2(2(pow x)-1)/2-1=2(pow x)-2=(1<<x)-2
we can write 2 raised to the power x as (1<<x)

sol)

#include<bits/stdc++.h>
using namespace std;
int main()
{
	char arr[20];
	cin>>arr;
	long long digits=strlen(arr);
	long long ans=0;
	ans=(1<<digits)-2;
	for(long long i=digits-1,count=0;i>=0;i--,count++)
	{
		if(arr[i]=='7')
		ans+=(1<<count);
	}
	cout<<(ans+1)<<"\n";
	
	return 0;
}

Q6)
array={1,2,3,3};
query={3,5,7,20};

for each query output the subset sum using bitwise manipulations.

sol)
approach to this problem can be using bitset 
bitset<10>b; then we can itialize it with zeroes.
then we will take an empty array arr={0};
we will set last bit as 1 which means we can create subset sum with every element;
then we left with the bitset by first array element
then we can do b|=(b<<arr[0])
this means now we can create sum of 0 and 1
then we will do left shift of bitset by second element
if we get 1 then it means we can get subset with that respective element
after traversing alll the elements of array our bitset will become 111111111
``````b|=(b<<arr[i])``````
now we will see handling queries
our queries array was={3,5,7,20}
now we will see that if(b[q[i]]==1)
return 1;
esle
return 0;


program->
#include<bits/stdc++.h>
using namespace std;
int main()
{
	int arr[]={1,2,3,4};
	int q[]={3,5,7,20};
	bitset <10> b;
	b[0]=1;
	for(int i=0;i<4;i++)
	{
		b|=(b<<arr[i]);
		cout<<b<<"\n";
	}
	for(int i=0;i<4;i++)
	{
		cout<<q[i]<<"->";
		if(b[q[i]])
		cout<<"subset sum exits \n";
		else
		cout<<"no";
	}
	return 0;
}



Q7)Kadane's Algorithm
a={1,-2,-1,5,-1,0,-1,7}
we will have to find i j such that a[i]+....a[j]=max sum possible

first we have to initialise two elements first is a[0]=max-till =1    a[0]=current-max=1

#include<bits/stdc++.h>
using namespace std;
int main()
{
	int arr[]={1,-2,-1,5,-1,0,-1,7};
	int n=sizeof(arr)/sizeof(arr[0]);
	int max_till=arr[0];
	int current_max=arr[0];
	for(int i=1;i<n;i++)
	{
		current_max=max(arr[i],current_max+arr[i]);
		max_till=max(max_till, current_max);
	}
	cout<<max_till<<"\n";
	return 0;
}


Q8)
A. Flipping Game
time limit per test1 second
memory limit per test256 megabytes
inputstandard input
outputstandard output
Iahub got bored, so he invented a game to be played on paper.

He writes n integers a1, a2, ..., an. Each of those integers can be either 0 or 1. He's allowed to do exactly one move: he chooses two indices i and j (1 ≤ i ≤ j ≤ n) and flips all values ak for which their positions are in range [i, j] (that is i ≤ k ≤ j). Flip the value of x means to apply operation x = 1 - x.

The goal of the game is that after exactly one move to obtain the maximum number of ones. Write a program to solve the little game of Iahub.

Input
The first line of the input contains an integer n (1 ≤ n ≤ 100). In the second line of the input there are n integers: a1, a2, ..., an. It is guaranteed that each of those n values is either 0 or 1.

Output
Print an integer — the maximal number of 1s that can be obtained after exactly one move.

Examples
inputCopy
5
1 0 0 1 0
outputCopy
4
inputCopy
4
1 0 0 1
outputCopy
4
Note
In the first case, flip the segment from 2 to 5 (i = 2, j = 5). That flip changes the sequence, it becomes: [1 1 1 0 1]. So, it contains four ones. There is no way to make the whole sequence equal to [1 1 1 1 1].

In the second case, flipping only the second and the third element (i = 2, j = 3) will turn all numbers into 1.



sol)


Q9)Window sum algorithm 
a={10,20,30,40,50}
find max sum using window sum algorithm 
window_sum=60;
best_Sum=0;
for(i=k to n)
window_sum+=arr[i]-arr[i-k];
ans=max(ans,window_sum)';

Q10)count subarray with sum equal to its xor value
a={1,2,3}

Q11)
A. Black Square
time limit per test1 second
memory limit per test256 megabytes
inputstandard input
outputstandard output
Quite recently, a very smart student named Jury decided that lectures are boring, so he downloaded a game called "Black Square" on his super cool touchscreen phone.

In this game, the phone's screen is divided into four vertical strips. Each second, a black square appears on some of the strips. According to the rules of the game, Jury must use this second to touch the corresponding strip to make the square go away. As Jury is both smart and lazy, he counted that he wastes exactly ai calories on touching the i-th strip.

You've got a string s, describing the process of the game and numbers a1, a2, a3, a4. Calculate how many calories Jury needs to destroy all the squares?

Input
The first line contains four space-separated integers a1, a2, a3, a4 (0 ≤ a1, a2, a3, a4 ≤ 104).

The second line contains string s (1 ≤ |s| ≤ 105), where the і-th character of the string equals "1", if on the i-th second of the game the square appears on the first strip, "2", if it appears on the second strip, "3", if it appears on the third strip, "4", if it appears on the fourth strip.

Output
Print a single integer — the total number of calories that Jury wastes.

Examples
inputCopy
1 2 3 4
123214
outputCopy
13
inputCopy
1 5 3 2
11221
outputCopy
13
sol)
#include<bits/stdc++.h>
#include <string.h> 
using namespace std;
int main()
{
	int n=4;int arr[4];
	for(int i=0;i<4;i++)
	{
		cin>>arr[i];
	}
	
	char str[100000];int sum=0;
	cin>>str;
//	cout<<"string ="<<str<<endl;
	int l=(unsigned)strlen(str);
	for(int i=0;i<l;i++)
	{
		if(str[i]=='1')
		{
			sum=sum+arr[0];
		}
		if(str[i]=='2')
		{
			sum=sum+arr[1];
		}
		if(str[i]=='3')
		{
			sum=sum+arr[2];
		}
		if(str[i]=='4')
		{
			sum=sum+arr[3];
		}
	}
	cout<<sum<<endl;
}
Q12). Buy a Shovel
time limit per test1 second
memory limit per test256 megabytes
inputstandard input
outputstandard output
Polycarp urgently needs a shovel! He comes to the shop and chooses an appropriate one. The shovel that Policarp chooses is sold for k burles. Assume that there is an unlimited number of such shovels in the shop.

In his pocket Polycarp has an unlimited number of "10-burle coins" and exactly one coin of r burles (1 ≤ r ≤ 9).

What is the minimum number of shovels Polycarp has to buy so that he can pay for the purchase without any change? It is obvious that he can pay for 10 shovels without any change (by paying the requied amount of 10-burle coins and not using the coin of r burles). But perhaps he can buy fewer shovels and pay without any change. Note that Polycarp should buy at least one shovel.

Input
The single line of input contains two integers k and r (1 ≤ k ≤ 1000, 1 ≤ r ≤ 9) — the price of one shovel and the denomination of the coin in Polycarp's pocket that is different from "10-burle coins".

Remember that he has an unlimited number of coins in the denomination of 10, that is, Polycarp has enough money to buy any number of shovels.

Output
Print the required minimum number of shovels Polycarp has to buy so that he can pay for them without any change.

Examples
inputCopy
117 3
outputCopy
9
inputCopy
237 7
outputCopy
1
inputCopy
15 2
outputCopy
2
Note
In the first example Polycarp can buy 9 shovels and pay 9·117 = 1053 burles. Indeed, he can pay this sum by using 10-burle coins and one 3-burle coin. He can't buy fewer shovels without any change.

In the second example it is enough for Polycarp to buy one shovel.

In the third example Polycarp should buy two shovels and pay 2·15 = 30 burles. It is obvious that he can pay this sum without any change.

sol)
#include<bits/stdc++.h>
using namespace std;
int main()
{
	int n,k,sum=1;
	cin>>n>>k;
	while(true)
	{
		if((n*sum)%10==0 || (n*sum)%10==k)
		{
			cout<<sum<<endl;
			return 0;
		}
		++sum;
	}
}
Q13)
Presents
time limit per test2 seconds
memory limit per test256 megabytes
inputstandard input
outputstandard output
Little Petya very much likes gifts. Recently he has received a new laptop as a New Year gift from his mother. He immediately decided to give it to somebody else as what can be more pleasant than giving somebody gifts. And on this occasion he organized a New Year party at his place and invited n his friends there.

If there's one thing Petya likes more that receiving gifts, that's watching others giving gifts to somebody else. Thus, he safely hid the laptop until the next New Year and made up his mind to watch his friends exchanging gifts while he does not participate in the process. He numbered all his friends with integers from 1 to n. Petya remembered that a friend number i gave a gift to a friend number pi. He also remembered that each of his friends received exactly one gift.

Now Petya wants to know for each friend i the number of a friend who has given him a gift.

Input
The first line contains one integer n (1 ≤ n ≤ 100) — the quantity of friends Petya invited to the party. The second line contains n space-separated integers: the i-th number is pi — the number of a friend who gave a gift to friend number i. It is guaranteed that each friend received exactly one gift. It is possible that some friends do not share Petya's ideas of giving gifts to somebody else. Those friends gave the gifts to themselves.

Output
Print n space-separated integers: the i-th number should equal the number of the friend who gave a gift to friend number i.

Examples
4
2 3 4 1
output4 1 2 3
3
1 3 2

output
1 3 2

sol
#include<bits/stdc++.h>
using namespace std;
int main()
{
	int n,p;
	cin>>n;
	vector<int> f(n+1);
	for(int i=1;i<=n;i++)
	{
		cin>>p;
		f[p]=i;
	}
	cout<<f[1]<<" ";
	for(int i=2;i<=n;i++)
	{
		cout<<f[i]<<" ";
	}
	cout<<endl;
	return 0;
}
Q14)
A. Snacktower
time limit per test2 seconds
memory limit per test256 megabytes
inputstandard input
outputstandard output
According to an old legeng, a long time ago Ankh-Morpork residents did something wrong to miss Fortune, and she cursed them. She said that at some time n snacks of distinct sizes will fall on the city, and the residents should build a Snacktower of them by placing snacks one on another. Of course, big snacks should be at the bottom of the tower, while small snacks should be at the top.

Years passed, and once different snacks started to fall onto the city, and the residents began to build the Snacktower.


However, they faced some troubles. Each day exactly one snack fell onto the city, but their order was strange. So, at some days the residents weren't able to put the new stack on the top of the Snacktower: they had to wait until all the bigger snacks fell. Of course, in order to not to anger miss Fortune again, the residents placed each snack on the top of the tower immediately as they could do it.

Write a program that models the behavior of Ankh-Morpork residents.

Input
The first line contains single integer n (1 ≤ n ≤ 100 000) — the total number of snacks.

The second line contains n integers, the i-th of them equals the size of the snack which fell on the i-th day. Sizes are distinct integers from 1 to n.

Output
Print n lines. On the i-th of them print the sizes of the snacks which the residents placed on the top of the Snacktower on the i-th day in the order they will do that. If no snack is placed on some day, leave the corresponding line empty.

Examples
inputCopy
3
3 1 2
outputCopy
3
 
2 1
inputCopy
5
4 5 1 2 3

sol)
#include<bits/stdc++.h>
using namespace std;
bool arr[100001];
int current=0;
void dis(int x,int current2)
{
	if(x==current2);
	{
		for(int k=current2;k>0;k--)
		{
			if(arr[k])
			{
				cout<<k<<" ";
				arr[k]=0;
				current=k-1;
			}
			else
			{
				break;
			}
		}
	}
}
int main()
{
	int n;
	cin>>n;
	current=n;
	
	for(int i=0;i<n;i++)
	{
		int x;
		cin>>x;
		arr[x]=1;
		dis(x,current);
		cout<<endl;
		
	}
	return 0;
	
}
Q15)A. Alyona and Numbers
time limit per test1 second
memory limit per test256 megabytes
inputstandard input
outputstandard output
After finishing eating her bun, Alyona came up with two integers n and m. She decided to write down two columns of integers — the first column containing integers from 1 to n and the second containing integers from 1 to m. Now the girl wants to count how many pairs of integers she can choose, one from the first column and the other from the second column, such that their sum is divisible by 5.

Formally, Alyona wants to count the number of pairs of integers (x, y) such that 1 ≤ x ≤ n, 1 ≤ y ≤ m and  equals 0.

As usual, Alyona has some troubles and asks you to help.

Input
The only line of the input contains two integers n and m (1 ≤ n, m ≤ 1 000 000).

Output
Print the only integer — the number of pairs of integers (x, y) such that 1 ≤ x ≤ n, 1 ≤ y ≤ m and (x + y) is divisible by 5.

Examples
inputCopy
6 12
outputCopy
14
inputCopy
11 14
outputCopy
31
inputCopy
1 5
outputCopy
1
inputCopy
3 8
outputCopy
5
inputCopy
5 7
outputCopy
7
inputCopy
21 21
outputCopy
88
Note
Following pairs are suitable in the first sample case:

for x = 1 fits y equal to 4 or 9;
for x = 2 fits y equal to 3 or 8;
for x = 3 fits y equal to 2, 7 or 12;
for x = 4 fits y equal to 1, 6 or 11;
for x = 5 fits y equal to 5 or 10;
for x = 6 fits y equal to 4 or 9.
Only the pair (1, 4) is suitable in the third sample case.

sol)#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
int main() {
    ll  n,m;
    cin>>n>>m;
    if(n>m) swap(n,m);
    ll temp=1,ans=0;
    for(ll i=5;temp>0;i+=5){
        if(n>=i) temp=i-1;
        else if(m>=i){
            temp=n; 
        }
        else if(i>m){
            temp=n-(i-m)+1;
        }
        if(temp>0) ans+=temp;
    }
    cout<<ans;
    return 0;
}

Q16)
Q17)
Q18)
Q19)
Q20)
Q21)
Q22)
Q23)
Q24)
Q25)
Q26)
Q27)
Q28)
Q29)
























